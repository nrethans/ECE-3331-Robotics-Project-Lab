$date
	Tue Jan 23 13:12:07 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module testbench $end
$var wire 8 ! segmentout [7:0] $end
$var wire 4 " cathode [3:0] $end
$var parameter 32 # PRD $end
$var reg 4 $ Hundreds_Data [3:0] $end
$var reg 4 % Ones_Data [3:0] $end
$var reg 4 & Tens_Data [3:0] $end
$var reg 4 ' Thousands_Data [3:0] $end
$var reg 1 ( clk $end
$scope module UUT $end
$var wire 4 ) Hundreds_Data [3:0] $end
$var wire 4 * Ones_Data [3:0] $end
$var wire 4 + Tens_Data [3:0] $end
$var wire 4 , Thousands_Data [3:0] $end
$var wire 1 ( clk $end
$var wire 2 - sync [1:0] $end
$var wire 8 . segmentout [7:0] $end
$var wire 8 / decoder4 [7:0] $end
$var wire 8 0 decoder3 [7:0] $end
$var wire 8 1 decoder2 [7:0] $end
$var wire 8 2 decoder1 [7:0] $end
$var wire 4 3 cathode [3:0] $end
$scope module U1 $end
$var wire 4 4 data [3:0] $end
$var reg 8 5 segments [7:0] $end
$upscope $end
$scope module U2 $end
$var wire 4 6 data [3:0] $end
$var reg 8 7 segments [7:0] $end
$upscope $end
$scope module U3 $end
$var wire 4 8 data [3:0] $end
$var reg 8 9 segments [7:0] $end
$upscope $end
$scope module U4 $end
$var wire 4 : data [3:0] $end
$var reg 8 ; segments [7:0] $end
$upscope $end
$scope module U5 $end
$var wire 1 ( clk $end
$var reg 2 < sync_count [1:0] $end
$upscope $end
$scope module U6 $end
$var wire 8 = segment1 [7:0] $end
$var wire 8 > segment2 [7:0] $end
$var wire 8 ? segment3 [7:0] $end
$var wire 8 @ segment4 [7:0] $end
$var wire 2 A sync_count [1:0] $end
$var reg 8 B segmentout [7:0] $end
$upscope $end
$scope module U7 $end
$var wire 2 C sync_count [1:0] $end
$var reg 4 D cathode [3:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b100 #
$end
#0
$dumpvars
b1110 D
b0 C
b11000000 B
b0 A
b10110000 @
b10100100 ?
b11111001 >
b11000000 =
b0 <
b10110000 ;
b11 :
b10100100 9
b10 8
b11111001 7
b1 6
b11000000 5
b0 4
b1110 3
b11000000 2
b11111001 1
b10100100 0
b10110000 /
b11000000 .
b0 -
b0 ,
b10 +
b11 *
b1 )
0(
b0 '
b10 &
b11 %
b1 $
b1110 "
b11000000 !
$end
#2
b1101 "
b1101 3
b1101 D
b11111001 !
b11111001 .
b11111001 B
b1 -
b1 <
b1 A
b1 C
1(
#4
0(
#6
b1011 "
b1011 3
b1011 D
b10100100 !
b10100100 .
b10100100 B
b10 -
b10 <
b10 A
b10 C
1(
#8
0(
#10
b111 "
b111 3
b111 D
b10110000 !
b10110000 .
b10110000 B
b11 -
b11 <
b11 A
b11 C
1(
#12
0(
#14
b1110 "
b1110 3
b1110 D
b11000000 !
b11000000 .
b11000000 B
b0 -
b0 <
b0 A
b0 C
1(
#16
b10011001 !
b10011001 .
b10011001 B
b11111000 /
b11111000 ;
b11111000 @
b10000010 0
b10000010 9
b10000010 ?
b10010010 1
b10010010 7
b10010010 >
b10011001 2
b10011001 5
b10011001 =
0(
b111 %
b111 *
b111 :
b110 &
b110 +
b110 8
b101 $
b101 )
b101 6
b100 '
b100 ,
b100 4
#18
b1101 "
b1101 3
b1101 D
b10010010 !
b10010010 .
b10010010 B
b1 -
b1 <
b1 A
b1 C
1(
#20
0(
#22
b1011 "
b1011 3
b1011 D
b10000010 !
b10000010 .
b10000010 B
b10 -
b10 <
b10 A
b10 C
1(
#24
0(
#26
b111 "
b111 3
b111 D
b11111000 !
b11111000 .
b11111000 B
b11 -
b11 <
b11 A
b11 C
1(
#28
0(
#30
b1110 "
b1110 3
b1110 D
b10011001 !
b10011001 .
b10011001 B
b0 -
b0 <
b0 A
b0 C
1(
#32
b10000000 !
b10000000 .
b10000000 B
b10010000 1
b10010000 7
b10010000 >
b10000000 2
b10000000 5
b10000000 =
0(
b1001 $
b1001 )
b1001 6
b1000 '
b1000 ,
b1000 4
#34
b1101 "
b1101 3
b1101 D
b10010000 !
b10010000 .
b10010000 B
b1 -
b1 <
b1 A
b1 C
1(
#36
0(
#38
b1011 "
b1011 3
b1011 D
b10000010 !
b10000010 .
b10000010 B
b10 -
b10 <
b10 A
b10 C
1(
#40
0(
